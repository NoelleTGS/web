class x{constructor(j,u,q="",A=""){this.imageSelector=j,this.bgSelector=u,this.fallbackImage=q,this.fallbackBg=A,this.threshold=0.5,this.observer=null}init(){this.observer=new IntersectionObserver(this.loadElements.bind(this),{threshold:this.threshold}),document.querySelectorAll(this.imageSelector).forEach((j)=>this.observer.observe(j)),document.querySelectorAll(this.bgSelector).forEach((j)=>this.observer.observe(j))}loadElements(j){j.forEach((u)=>{if(u.isIntersecting){const q=u.target;if(q.tagName==="IMG"&&q.hasAttribute("data-src"))this.loadImage(q);if(q.hasAttribute("data-bg"))this.loadBackground(q);this.observer.unobserve(q)}})}loadImage(j){const u=j.getAttribute("data-src");if(j.src=u,this.fallbackImage)j.onerror=()=>{j.src=this.fallbackImage};j.removeAttribute("data-src")}loadBackground(j){const u=j.getAttribute("data-bg");j.style.backgroundImage=`url('${u}'), url('${this.fallbackBg}')`,j.removeAttribute("data-bg")}update(){const j=document.querySelectorAll(this.imageSelector),u=document.querySelectorAll(this.bgSelector);j.forEach((q)=>this.observer.observe(q)),u.forEach((q)=>this.observer.observe(q))}destroy(){this.observer.disconnect()}}var C=new x("img[data-src]","[data-bg]","/public/img/fallback.webp","/public/img/fallback.webp");C.init();
